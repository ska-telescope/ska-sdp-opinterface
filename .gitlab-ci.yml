variables:
  GIT_STRATEGY: clone

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

stages:
  - test
  - publish

image: python:3.9-slim

# ============================================================================
# Test and lint Python package
# ============================================================================

test:
  stage: test
  before_script:
    - pip install -r requirements.txt -r requirements-test.txt
  script:
    - python setup.py test
  after_script:
    - mkdir -p build/reports
    - mv code-coverage.xml unit-tests.xml build/reports
  artifacts:
    paths:
      - build
    expire_in: 1 week
    when: always

lint:
  stage: test
  before_script:
    - pip install -r requirements.txt -r requirements-test.txt
  script:
    - pylint --exit-zero --output-format=parseable src/ska_sdp_opinterface
    - pylint --exit-zero --output-format=pylint2junit.JunitReporter src/ska_sdp_opinterface > linting.xml
    - black --check .
  after_script:
    - mkdir -p build/reports
    - mv linting.xml build/reports
  artifacts:
    paths:
      - build
    expire_in: 1 week
    when: always

# ============================================================================
# Build and publish Docker image
# ============================================================================

.publish:
  stage: publish
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - apk add make git
    - echo $PASSWORD | docker login --username $USERNAME --password-stdin $REGISTRY
  script:
    - make build
    - make push

# Publish development version to GitLab on non-tag commit

publish-dev:
  extends: .publish
  variables:
    REGISTRY: $CI_REGISTRY
    USERNAME: $CI_REGISTRY_USER
    PASSWORD: $CI_REGISTRY_PASSWORD
    PREFIX: $CI_REGISTRY_IMAGE
    GITHASH: $CI_COMMIT_SHORT_SHA
  rules:
    - if: '$CI_COMMIT_TAG == null || $CI_COMMIT_TAG == ""'

# Publish release to artefact repository on tag commit on master

publish-release:
  extends: .publish
  variables:
    REGISTRY: $CAR_OCI_REGISTRY_HOST
    USERNAME: $CAR_OCI_REGISTRY_USERNAME
    PASSWORD: $CAR_OCI_REGISTRY_PASSWORD
    PREFIX: $CAR_OCI_REGISTRY_HOST
    RELEASE: "true"
  only:
    variables:
       - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
       - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/ #Confirm semantic versioning of tag
  except:
    - branches

# ============================================================================
# CI metrics
# ============================================================================
# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'
